import{queryAll}from"../utils/util.js";import{isAndroid}from"../utils/device.js";export default class Controls{constructor(t){this.Reveal=t,this.onNavigateLeftClicked=this.onNavigateLeftClicked.bind(this),this.onNavigateRightClicked=this.onNavigateRightClicked.bind(this),this.onNavigateUpClicked=this.onNavigateUpClicked.bind(this),this.onNavigateDownClicked=this.onNavigateDownClicked.bind(this),this.onNavigatePrevClicked=this.onNavigatePrevClicked.bind(this),this.onNavigateNextClicked=this.onNavigateNextClicked.bind(this)}render(){const t=this.Reveal.getConfig().rtl,e=this.Reveal.getRevealElement();this.element=document.createElement("aside"),this.element.className="controls",this.element.innerHTML=`<button class="navigate-left" aria-label="${t?"next slide":"previous slide"}"><div class="controls-arrow"></div></button>\n\t\t\t<button class="navigate-right" aria-label="${t?"previous slide":"next slide"}"><div class="controls-arrow"></div></button>\n\t\t\t<button class="navigate-up" aria-label="above slide"><div class="controls-arrow"></div></button>\n\t\t\t<button class="navigate-down" aria-label="below slide"><div class="controls-arrow"></div></button>`,this.Reveal.getRevealElement().appendChild(this.element),this.controlsLeft=queryAll(e,".navigate-left"),this.controlsRight=queryAll(e,".navigate-right"),this.controlsUp=queryAll(e,".navigate-up"),this.controlsDown=queryAll(e,".navigate-down"),this.controlsPrev=queryAll(e,".navigate-prev"),this.controlsNext=queryAll(e,".navigate-next"),this.controlsRightArrow=this.element.querySelector(".navigate-right"),this.controlsLeftArrow=this.element.querySelector(".navigate-left"),this.controlsDownArrow=this.element.querySelector(".navigate-down")}configure(t,e){this.element.style.display=t.controls?"block":"none",this.element.setAttribute("data-controls-layout",t.controlsLayout),this.element.setAttribute("data-controls-back-arrows",t.controlsBackArrows)}bind(){let t=["touchstart","click"];isAndroid&&(t=["touchstart"]),t.forEach((t=>{this.controlsLeft.forEach((e=>e.addEventListener(t,this.onNavigateLeftClicked,!1))),this.controlsRight.forEach((e=>e.addEventListener(t,this.onNavigateRightClicked,!1))),this.controlsUp.forEach((e=>e.addEventListener(t,this.onNavigateUpClicked,!1))),this.controlsDown.forEach((e=>e.addEventListener(t,this.onNavigateDownClicked,!1))),this.controlsPrev.forEach((e=>e.addEventListener(t,this.onNavigatePrevClicked,!1))),this.controlsNext.forEach((e=>e.addEventListener(t,this.onNavigateNextClicked,!1)))}))}unbind(){["touchstart","click"].forEach((t=>{this.controlsLeft.forEach((e=>e.removeEventListener(t,this.onNavigateLeftClicked,!1))),this.controlsRight.forEach((e=>e.removeEventListener(t,this.onNavigateRightClicked,!1))),this.controlsUp.forEach((e=>e.removeEventListener(t,this.onNavigateUpClicked,!1))),this.controlsDown.forEach((e=>e.removeEventListener(t,this.onNavigateDownClicked,!1))),this.controlsPrev.forEach((e=>e.removeEventListener(t,this.onNavigatePrevClicked,!1))),this.controlsNext.forEach((e=>e.removeEventListener(t,this.onNavigateNextClicked,!1)))}))}update(){let t=this.Reveal.availableRoutes();[...this.controlsLeft,...this.controlsRight,...this.controlsUp,...this.controlsDown,...this.controlsPrev,...this.controlsNext].forEach((t=>{t.classList.remove("enabled","fragmented"),t.setAttribute("disabled","disabled")})),t.left&&this.controlsLeft.forEach((t=>{t.classList.add("enabled"),t.removeAttribute("disabled")})),t.right&&this.controlsRight.forEach((t=>{t.classList.add("enabled"),t.removeAttribute("disabled")})),t.up&&this.controlsUp.forEach((t=>{t.classList.add("enabled"),t.removeAttribute("disabled")})),t.down&&this.controlsDown.forEach((t=>{t.classList.add("enabled"),t.removeAttribute("disabled")})),(t.left||t.up)&&this.controlsPrev.forEach((t=>{t.classList.add("enabled"),t.removeAttribute("disabled")})),(t.right||t.down)&&this.controlsNext.forEach((t=>{t.classList.add("enabled"),t.removeAttribute("disabled")}));let e=this.Reveal.getCurrentSlide();if(e){let t=this.Reveal.fragments.availableRoutes();t.prev&&this.controlsPrev.forEach((t=>{t.classList.add("fragmented","enabled"),t.removeAttribute("disabled")})),t.next&&this.controlsNext.forEach((t=>{t.classList.add("fragmented","enabled"),t.removeAttribute("disabled")})),this.Reveal.isVerticalSlide(e)?(t.prev&&this.controlsUp.forEach((t=>{t.classList.add("fragmented","enabled"),t.removeAttribute("disabled")})),t.next&&this.controlsDown.forEach((t=>{t.classList.add("fragmented","enabled"),t.removeAttribute("disabled")}))):(t.prev&&this.controlsLeft.forEach((t=>{t.classList.add("fragmented","enabled"),t.removeAttribute("disabled")})),t.next&&this.controlsRight.forEach((t=>{t.classList.add("fragmented","enabled"),t.removeAttribute("disabled")})))}if(this.Reveal.getConfig().controlsTutorial){let e=this.Reveal.getIndices();!this.Reveal.hasNavigatedVertically()&&t.down?this.controlsDownArrow.classList.add("highlight"):(this.controlsDownArrow.classList.remove("highlight"),this.Reveal.getConfig().rtl?!this.Reveal.hasNavigatedHorizontally()&&t.left&&0===e.v?this.controlsLeftArrow.classList.add("highlight"):this.controlsLeftArrow.classList.remove("highlight"):!this.Reveal.hasNavigatedHorizontally()&&t.right&&0===e.v?this.controlsRightArrow.classList.add("highlight"):this.controlsRightArrow.classList.remove("highlight"))}}destroy(){this.unbind(),this.element.remove()}onNavigateLeftClicked(t){t.preventDefault(),this.Reveal.onUserInput(),"linear"===this.Reveal.getConfig().navigationMode?this.Reveal.prev():this.Reveal.left()}onNavigateRightClicked(t){t.preventDefault(),this.Reveal.onUserInput(),"linear"===this.Reveal.getConfig().navigationMode?this.Reveal.next():this.Reveal.right()}onNavigateUpClicked(t){t.preventDefault(),this.Reveal.onUserInput(),this.Reveal.up()}onNavigateDownClicked(t){t.preventDefault(),this.Reveal.onUserInput(),this.Reveal.down()}onNavigatePrevClicked(t){t.preventDefault(),this.Reveal.onUserInput(),this.Reveal.prev()}onNavigateNextClicked(t){t.preventDefault(),this.Reveal.onUserInput(),this.Reveal.next()}}